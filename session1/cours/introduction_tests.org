# -*- mode: org; org-confirm-babel-evaluate: nil; org-babel-noweb-wrap-start: "«"; org-babel-noweb-wrap-end: "»"; ispell-local-dictionary: "fr_FR" -*-

#+TITLE: Introduction aux tests
#+AUTHOR: Bernard Hugueney

#+LANGUAGE: fr
#+LANG: fr

#+BEGIN_SRC elisp :exports none :results silent
 (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((ditaa . t)
   (java . t)))
#+END_SRC


* Pourquoi tester ?

Quand on écrit un programme, on voudrait avoir des raisons de croire
qu'il est correct ! Malheureusement, la plupart des langages de
programmation ne peuvent même pas garantir que (x + 1) > x, à cause
des [[https://fr.wikipedia.org/wiki/D%25C3%25A9passement_d%2527entier][dépassements de capacité]], ou que 3*(1/10) = 3/10, à cause des
[[https://fr.wikipedia.org/wiki/IEEE_754][erreurs de représentation]] :
#+BEGIN_SRC java :classname BadMathDemo :results raw
public class BadMathDemo {
    public static void main(String[] args){
	int i = Integer.MAX_VALUE;
	System.out.println("i+1 > i ? " + ((i+1) > i));
	System.out.println();
	System.out.println("3*(1./10) == 3./10 ? " + ((3*(1./10)) == (3./10)));
    }
}
#+END_SRC

#+RESULTS:
i+1 > i ? false

3*(1./10) == 3./10 ? false


 Donc évidemment, on ne peut pas prouver grand chose quand à
l'exactitude d'un programme écrit dans un tel langage [fn::d'autres
langages (par exemple [[https://fr.wikipedia.org/wiki/Coq_(logiciel)][Coq]]) sont prévus pour ça]. Faute de preuves, on
cherche à se donner des raisons de croire qu'un programme fonctionne
correctement en le testant. Mais si des tests peuvent prouver la
présence de bugs, ils ne peuvent pas prouver leur absence. En
pratique, on considère qu'un programme est suffisamment peu buggé
lorsque la vitesse de découverte de bugs et leur gravité sont
suffisamment faibles.


* Que tester ?

Si à terme il faudra bien tester le programme, voire le système auquel
s'intègre le programme, on commence par tester les unités
fonctionnelles les plus petites. On s'intéressera dans un premier
temps aux [[https://fr.wikipedia.org/wiki/Test_unitaire][tests unitaires]]. On va tester les fonctions/méthodes et les
classes.

Pour qu'une fonction soit plus facilement testable, on voudra qu'elle
soit [[https://fr.wikipedia.org/wiki/Fonction_pure][pure]] autant que possible :
- il est plus facile de passer des arguments que de construire un état du système
- il est plus facile de valider un résultat calculé que de constater
  un effet produit

On voudra tester toutes les lignes du code à tester, ce qui n'est pas
évident à cause des structures de contrôle, d'où la notion de
[[https://fr.wikipedia.org/wiki/Couverture_de_code][couverture de code]] qui caractérise le pourcentage de code qui est
effectivement exécuté par les tests.


* Comment tester ?

Pour essayer de s'assurer qu'on [[https://fr.wikipedia.org/wiki/Test_de_r%25C3%25A9gression][introduit pas de bugs]], on a besoin de
répéter les tests à chaque modification. Par ailleurs, on veut pouvoir
tester différentes configurations (de systèmes d'exploitations, de
versions de logiciels,…). Il est donc essentiel de pouvoir
*automatiser* les tests. Les tests doivent donc être des programmes
qui peuvent être lancés automatiquement, par exemple à chaque commit,
voire compilation.

Pour chaque fonction à tester, on va déterminer un ensemble de valeurs
d'arguments pour lesquels on va s'assurer que la fonction retourne
bien le résultat attendu. On choisit ces arguments de façon à essayer
de tester les cas particuliers et maximiser la couverture de code.



- Exercice :: Écrire un ou des programmes de tests qui teste[nt]
              chacune des fonctions implémentées.


* TODO Outils pour tester

** Automatisation

À terme, on pourra utilisera des outils d'[[https://fr.wikipedia.org/wiki/Int%25C3%25A9gration_continue][Intégration Continue]], par
exemple [[https://github.com/bhugueney/testing-actions-for-java-tests/commit/0660a23706633c491830459b48a1f11a5d77f3cd/checks?check_suite_id=221096623][Github Actions]] pour automatiser l'exécution des tests.

** Frameworks de test

On utilisera des frameworks de tests, par exemple [[http://www.jmdoudoux.fr/java/dej/chap-junit5.htm][JUnit 5]], pour
automatiser l'écriture des tests.
