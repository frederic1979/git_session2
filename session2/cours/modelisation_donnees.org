#+TITLE: Modèles de données
#+AUTHOR: Bernard Hugueney
#+DATE: 

#+BEGIN_SRC elisp :exports none :results silent
(org-babel-do-load-languages 'org-babel-load-languages '((dot . t)(ditaa . t)(emacs-lisp . t)(gnuplot . t)(java . t)(plantuml . t)(python . t)(R . t)(shell . t))) 
(setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (add-to-list 'org-latex-packages-alist '("" "color"))
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (setq org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "bibtex %b"
                                "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (setq org-latex-minted-options '(("frame" "lines")
                                   ("fontsize" "\\scriptsize")
                                   ("xleftmargin" "\\parindent")
                                   ("linenos" "")))
#+END_SRC


* Introduction
On a vu que pour l'écriture d'un programme, il fallait se poser en
premier lieu la question des entités manipulées et de leur
représentation en mémoire dans l'ordinateur, sous forme de types.

On a aussi eu l'occasion de remarquer que le stockage de données sous
la forme de fichiers textes était problématique (format et validité
des données notamment). Dans le cadre d'un système d'informations
(/SI/), on aura aussi des problématiques de performance et de fiabilité,
notamment dans le cas d'accès /concurrents/.

La modélisation de données manipulées par un SI est aussi une étape
fondamentale préalable au développement.

Elle se décompose, du plus abstrait/général au plus concret/détaillé,
du passage des spécifications (représentations mentales) à
l'implémentation (représentation dans le SI):
- spécification / receuil des besoins
- modèle conceptuel de données
- modèle logique de données
- modèle physique de données
- implémentation de la base de données

On s'intéressera non seulement aux entités, mais aussi à leurs
relations. L'approche suivi est donc celle d'une [[https://en.wikipedia.org/wiki/Entity%25E2%2580%2593relationship_model][modęlisation
Entités-Relations]]. Des représentations graphiques sont
particulièrement adaptées et l'on utilisera des schémas de
représentation selon un langage conventionnel. Pour simplifier, on
utilisera un sous-ensemble de la représentation UML des diagrammes de
classe (utilisé par ailleurs pour documenter les classe d'un projet
implémenté en POO) pour représenter les entités et leurs relations.

* Modèle Relationnel
Le [[https://en.wikipedia.org/wiki/Relational_model][modèle relationnel]] représente les entités et leurs relations sous
la forme de tuples. Dans un système de bases de données relationnelles
(SGBDR), ces tuples sont les lignes de /tables/, les colonnes
correspondent aux attributs de la relation.


Par rapport à une modélisation objet, on a les correspondances
suivantes :
- table :: classe
- colonne :: attribut
- ligne :: objet

L'ordre des lignes d'une table n'est pas défini, il n'y a donc pas
d'équivalent d'une adresse pouvant servir de référence. Si l'on veut
pouvoir distinguer l'identité de deux entités égales, il faudra
définir un identifiant dont on garantira l'unicité.


* Exemples
On va s'intéresser à différents cas d'applications :

** Vente en ligne

** Bibliothèques virtuelles

** Organisation de circuits touristiques

** Planification de repas équilibrés


* Modèle conceptuel de données
La première étape, le [[https://en.wikipedia.org/wiki/Conceptual_schema][modèle conceptuel de données]] consiste à définir
tout et seulement ce qui est nécessaire pour exprimer les besoins
métiers. Les entités et leurs relations sont seulement (?) nommées. Le
nommage est une activité *essentielle* (et difficile).

#+BEGIN_SRC plantuml :file conceptual-model-store.png
Client - Commande
Commande - Produit
(Commande, Produit) . Ligne
#+END_SRC

#+RESULTS:
[[file:conceptual-model-store.png]]

* Modèle logique de données
On précise le modèle conceptuel :
- Relations :
  - Orientation (bidirectionnelle ou non) 
  - Cardinalité
  - Dépendance ou non sur les durées de vie (agrégation ou
    composition)
  - Les relations peuvent être réifiées (avec des attributs). Voir la
    notion d'[[https://en.wikipedia.org/wiki/Associative_entity][entité d'association]].
- Entités :
  1. attributs
  2. domaines de définition (plus précis qu'un type)
  3. identifiants
- Contraintes d'intégrité :
  - sur les attributs (cf. domaines de définition)
  - entre différentes entités

* Modèle physique de données
On prend en compte l'implémentation sous forme de base de données
relationnelle et l'on défini les /tables/ :
- [[http://www-db.deis.unibo.it/courses/TW/DOCS/w3schools/sql/sql_datatypes_general.asp.html][types précis]] (mais cf. infra : dialects) 
- cĺés :
  - primaires
  - étrangères
- [[https://en.wikipedia.org/wiki/Check_constraint][contraintes d'intégrités explicites]]

* À approfondir

La performance des SGDBR est souvent un aspect critique. Par rapport à
ce qui a été abordé, il faudra aussi considérer :
- [[https://use-the-index-luke.com/][les index]] qui permettent d'accélérer certaines requêtes en lecture
  au prix d'un coût en espace de stockage et en temps d'écriture.
- [[https://en.wikipedia.org/wiki/Denormalization][la dénormalisation]] qui permet d'accélérer certaines requêtes en
  lecture (éliminant des jointures) au prix de redondances de données
  stockée (coût en espace de stockage et problématique de maintient de
  cohérence en modification)
  

* En pratique
** Schémas UML
Notation : on utilise un sous-ensemble de la notation des diagrammes
de classe en UML. On peut utiliser pour cela n'importe quel logiciel,
par exemple un [[http://plantuml.com/fr/eclipse][plugin PlantUML pour Eclipse]] ou un [[https://plugins.jetbrains.com/plugin/7017-plantuml-integration/][plugin pour
IntelliJ]].

** Implémentation de SGBDR : SQL

[[https://en.wikipedia.org/wiki/SQL][SQL]] est le langage *standard* des SGDBR. Malheureusement, les
différents SGDBR implémentent des *dialectes* plus ou moins complets /
compatibles entre eux. Il faudra donc s'intéresser au SGDBR utilisé
pour l'implémentation lors de la conception du modèle physique de
données. Ce sera aussi l'une des motivations pour utiliser une couche
d'abstraction qui automatisera l'utilisation de divers dialectes de SQL
à partir de programmes Java au travers d'une interface uniforme.

On peut pratiquer SQL de différentes façons :

- [[http://sqlfiddle.com/#!17][console sql en ligne]]

- [[https://customer.elephantsql.com/instance/create?plan=turtle][(petite) base de donnée PostgreSQL en ligne gratuite]]

- [[https://www.postgresql.org/][installation locale de PostgreSQL]]


La [[https://www.postgresql.org/docs/9.6/static/index.html][documentation en ligne]] et des [[http://www.postgresqltutorial.com/][tutoriels]] de qualité sont disponibles
pour PostgreSQL.
